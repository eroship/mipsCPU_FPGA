// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/04/2021 22:31:16"
                                                                                
// Verilog Test Bench template for design : top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module top_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg reset;
// wires                                               
wire ALUsrc;
wire CF;
wire OF;
wire [31:0]  PC;
wire ZF;
wire brachTrue;
wire branch;
wire [31:0]  busB;
wire clk_5000HZ;
wire [31:0]  inst;
wire jump;
wire memRoReg;
wire memWrite;
wire [6:0]  numberDecode;
wire [31:0]  out;
wire [3:0]  posDecode;
wire regDist;
wire regWrite;
wire [31:0]  rsdata;
wire [31:0]  rtdata;

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.ALUsrc(ALUsrc),
	.CF(CF),
	.OF(OF),
	.PC(PC),
	.ZF(ZF),
	.brachTrue(brachTrue),
	.branch(branch),
	.busB(busB),
	.clk(clk),
	.clk_5000HZ(clk_5000HZ),
	.inst(inst),
	.jump(jump),
	.memRoReg(memRoReg),
	.memWrite(memWrite),
	.numberDecode(numberDecode),
	.out(out),
	.posDecode(posDecode),
	.regDist(regDist),
	.regWrite(regWrite),
	.reset(reset),
	.rsdata(rsdata),
	.rtdata(rtdata)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

